const handleKeyDown = async (event) => {

  // if (event.ctrlKey && event.key === 'Enter') {
  if (event.shiftKey && event.key === 'Enter') {
    console.log('Shift + Enter pressed');
    return;
  }

  if (event.key === 'En0ter') {
    console.log('Enter pressed');
    questionInput = document.getElementById("questionInput").innerText;
    //console.log("Clicked sendButton!!!", questionInput)

    document.getElementById("questionInput").innerText = "";
    document.querySelector(".right2").style.display = "block"
    document.querySelector(".right1").style.display = "none"

    document.querySelector(".right_letter").style.display = "none"
    document.querySelector(".right_nda").style.display = "none"
    document.querySelector(".right_proposal").style.display = "none"

    // Parameters
    let params = {
      "sender_id": "1",
      "conversation_id": "1",
      "prompt": questionInput,
      "use_history": true
    };

    // Get the answer and populate it! 
    //////////////////// let allresults = await postData("/api", params)

    // Log allresults to understand its structure
    //console.log("API Response:", allresults)
    //console.dir(allresults)












    // Parse the JSON string into a JavaScript object
    // let responseObject = allresults

    // console.log('responseObject:...', responseObject)

    // Get an array of keys
    // const keysArray = Object.keys(responseObject);

    // Get an array of values
    // const valuesArray = Object.values(responseObject);

    // Output the arrays
    //console.log('Keys:', keysArray);
    //console.log('Values:', valuesArray);


    // Get the container element
    const container = document.getElementById('container');




    // Loop through 'allresults' array and create instances dynamically    
    // for (let key in responseObject) {

    // //console.log(`Question: ${res.Human}, Answer: ${res.AI}`);
    //console.log(`Question: ${key}, Answer: ${responseObject[key]}`);
    // console.dir(responseObject)
    // Create the first instance
    const box1 = document.createElement('div');
    box1.classList.add('box1', 'm-auto', 'py-7', 'px-40', 'flex', 'justify-start', 'w-[35vw]', 'items-center', 'space-x-6');
    // box1.innerHTML = `
    //   <img class="w-9 ml-4" src="static/Images/user.png" alt="">
    //   <div class="flex space-y-4 flex-col">
    //     <div id="question_"><span class="text-sm"><b>You</b></span></div>
    //     <div id="question2"><span class="text-sm">${responseObject["Human"]}</span></div>
    //   </div>
    // `;
    box1.innerHTML = `
      <img class="w-9 ml-4" src="static/Images/user.png" alt="">
      <div class="flex space-y-4 flex-col">
        <div id="question_"><span class="text-sm"><b>You</b></span></div>
        <div id="question2"><span class="text-sm">${questionInput}</span></div>
      </div>
    `;

    // Create the second instance
    let box2 = document.createElement('div');
    box2.classList.add('box2', 'bg-gray-600', 'py-7', 'px-40', 'flex', 'justify-start', 'w-max', 'items-center');
    // box2.innerHTML = `
    //   <div class="box w-[35vw] flex justify-start space-x-6">
    //     <img class="w-9 h-9 ml-4" src="static/Images/cclbot.png" alt="">
    //     <div class="flex space-y-4 flex-col">
    //       <div id="question1"><span class="text-sm"><b>CCL Bot</b></span></div>
    //       <div id="solution"><span class="text-sm">${responseObject["AI"]}</span></div>
    //     </div>
    //   </div>
    // `;
    box2.innerHTML = `
      <div class="box w-[35vw] flex justify-start space-x-6">
        <img class="w-9 h-9 ml-4" src="static/Images/cclbot.png" alt="">
        <div class="flex space-y-4 flex-col">
          <div id="question1"><span class="text-sm"><b>CCL Bot</b></span></div>
          <div id="solution"><span class="text-sm">Loading... </span></div>        
        <br>

        <div class="svg-container flex">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md api-svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 2.5C5.05228 2.5 5.5 2.94772 5.5 3.5V5.07196C7.19872 3.47759 9.48483 2.5 12 2.5C17.2467 2.5 21.5 6.75329 21.5 12C21.5 17.2467 17.2467 21.5 12 21.5C7.1307 21.5 3.11828 17.8375 2.565 13.1164C2.50071 12.5679 2.89327 12.0711 3.4418 12.0068C3.99033 11.9425 4.48712 12.3351 4.5514 12.8836C4.98798 16.6089 8.15708 19.5 12 19.5C16.1421 19.5 19.5 16.1421 19.5 12C19.5 7.85786 16.1421 4.5 12 4.5C9.7796 4.5 7.7836 5.46469 6.40954 7H9C9.55228 7 10 7.44772 10 8C10 8.55228 9.55228 9 9 9H4.5C3.96064 9 3.52101 8.57299 3.50073 8.03859C3.49983 8.01771 3.49958 7.99677 3.5 7.9758V3.5C3.5 2.94772 3.94771 2.5 4.5 2.5Z" fill="currentColor"></path>
          </svg>  
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md copy-svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M12 4C10.8954 4 10 4.89543 10 6H14C14 4.89543 13.1046 4 12 4ZM8.53513 4C9.22675 2.8044 10.5194 2 12 2C13.4806 2 14.7733 2.8044 15.4649 4H17C18.6569 4 20 5.34315 20 7V19C20 20.6569 18.6569 22 17 22H7C5.34315 22 4 20.6569 4 19V7C4 5.34315 5.34315 4 7 4H8.53513ZM8 6H7C6.44772 6 6 6.44772 6 7V19C6 19.5523 6.44772 20 7 20H17C17.5523 20 18 19.5523 18 19V7C18 6.44772 17.5523 6 17 6H16C16 7.10457 15.1046 8 14 8H10C8.89543 8 8 7.10457 8 6Z" fill="currentColor"></path>
          </svg>
        </div>
      </div>
      </div>
    `;


    // Add click event for the copy-svg icon
    box2.querySelector('.copy-svg').addEventListener('click', function () {
      // const solutionText = box2.querySelector('#solution').textContent;
      // Use the solutionText as needed, e.g., copy to clipboard
      // console.log('Copying:', solutionText);


      const solutionText = box2.querySelector('#solution').textContent;

      // Copy text to clipboard
      navigator.clipboard.writeText(solutionText)
        .then(() => {
          console.log('Text copied to clipboard:', solutionText);
          // You can add further handling or UI updates here if needed
        })
        .catch(err => {
          console.error('Unable to copy text to clipboard:', err);
          // Handle errors or show a message to the user
        });


    });

    // Add click event for the api-svg icon
    box2.querySelector('.api-svg').addEventListener('click', function () {
      // Call your API here
      console.log('Calling API');
    });

    // Append both instances to the container
    container.appendChild(box1);
    container.appendChild(box2);
    // });
    // };


    // Get the existing element with id 'chatbox'
    const chatbox = document.getElementById('chatbox_space');

    // Insert the container above the 'chatbox' element
    chatbox.parentNode.insertBefore(container, chatbox);



    //////////////////////////////////////////////////////////////////////////////////
    message = questionInput
    // Send a request to the Flask server with the user's message
    const response = await fetch("/api", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      // body: JSON.stringify({ messages: [{ role: "user", content: message }] }),
      body: JSON.stringify({ messages: [{ "sender_id": "user1", "conversation_id": "1", "prompt": message, "use_history": false }] }),

    });

    // Create a new TextDecoder to decode the streamed response text
    const decoder = new TextDecoder();

    // Set up a new ReadableStream to read the response body
    const reader = response.body.getReader();
    let chunks = "";

    // Read the response stream as chunks and append them to the chat log
    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      chunks += decoder.decode(value);
      // solution
      const soln = document.getElementById('solution');
      soln.innerHTML = chunks;
    }







    ///////////////////////////////////////////////////////////////////////////////////

    // Create a new TextDecoder to decode the streamed response text
    // const decoder = new TextDecoder();

    // // Set up a new ReadableStream to read the response body
    // const reader = response.body.getReader();
    // let chunks = "";

    // // Read the response stream as chunks and append them to the chat log
    // while (true) {
    //   const { done, value } = await reader.read();
    //   if (done) break;
    //   chunks += decoder.decode(value);
    //   box2.innerHTML = chunks;
    // }

    // Prevent the default behavior (new line in contenteditable)
    event.preventDefault();

  }
};
















@app.route("/proposal", methods=["GET", "POST"])
def getproposal():
    url = "http://54.174.77.47/api/v1/generate/proposal/stream"
    chat_box = ""
    if request.method == "POST":
        # print(request.json)
        # section_ids = request.json.get("sections")
        # print(section_ids)        

        headers = {
        "Content-Type": "application/json",
        }
        # data = request.json['context']
        data = request.json
        print('data....', data)

        response = requests.post(url, json=data, headers=headers)

        

        if response.status_code == 200:

            # print(response.json())
            print('response ......')
            print(response.text )
            # Request was successful
            # response_json = response.json().get("text")
            response_json = response.text
            return jsonify(response_json)
        else:
            # Request failed
            print(f"Error: {response.status_code} - {response.text}")                

    # data = {"result": "Thank you! I'm just a machine learning model designed to respond to questions and generate text based on my training data. Is there anything specific you'd like to ask or discuss? "}
    return jsonify("Nothing...")















4
5
6
10


4  - overview_template
5  - introduction
6  - problems
10  - executive_summary

"How will the implementation of Cyphercescent's digitalised tools enhance data integration and consistency, ultimately leading to improved success rates for [specific goal] and [related outcome]?",
    "What are the key benefits and objectives of implementing the Enterprise Planning System (EPS) in your organisation's business planning process?"


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

// Create the first instance
    const box1 = document.createElement('div');
    box1.classList.add('box1', 'm-auto', 'py-7', 'px-40', 'flex', 'justify-start', 'w-[35vw]', 'items-center', 'space-x-6');
    box1.innerHTML = `
       <img class="w-9 ml-4" src="static/Images/user.png" alt="">
       <div class="flex space-y-4 flex-col">
          <div id="question_"><span class="text-sm"><b>You</b></span></div>
          <div id="question2"><span class="text-sm">${responseObject["Human"]}</span></div>
        </div>       
     `;

    // Create the second instance
    let box2 = document.createElement('div');
    box2.classList.add('box2', 'bg-gray-600', 'py-7', 'px-40', 'flex', 'justify-start', 'w-max', 'items-center');
    box2.innerHTML = `
       <div class="box w-[35vw] flex justify-start space-x-6">
         <img class="w-9 h-9 ml-4" src="https://chat.openai.com/favicon.ico" alt="">
         <div class="flex space-y-4 flex-col">
           <div id="question1"><span class="text-sm"><b>CCL Bot</b></span></div>
           <div id="solution"><span class="text-sm">${responseObject["AI"]}</span></div>
         </div>
       </div>
     `;


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

@app.route("/letter", methods=["GET", "POST"])
def qletter():
    print("HEEEELLLLLLOOOOOO")
    if request.method == "POST":
        print(request.json)
        question = request.json.get("question")

        chat = mongo.db.chats.find_one({"question": question})
        print(chat)
        if chat:
            # Exclude _id field from the retrieved chat document
            chat.pop('_id', None)
            data = {"session": session['chat_session'],
                    "question": question, "answer": f"{chat['answer']}"}

            return jsonify(data)
        else:
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=question,
                temperature=0.7,
                max_tokens=256,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            print(response)

            data = {"session": str(session['chat_session']), "question": question,
                    "answer": response["choices"][0]["text"]}
            # mongo.db.chats.insert_one({"question": question, "answer": response["choices"][0]["text"]})
            mongo.db.chats.insert_one(data)

            # Append the values to the session list

            session['answer_letter'].append(data)
            # return jsonify(data)

            # Remove _id field from all documents in the session list
            for item in session['answer_letter']:
                item.pop('_id', None)

            results = session['answer_letter']
            print('openai RETURED: ')
            print(results)
            print(session)
            # print(session['answer_data_list'])
            return jsonify(results)
    data = {"result": "Thank you! I'm just a machine learning model designed to respond to questions and generate text based on my training data. Is there anything specific you'd like to ask or discuss? "}

    return jsonify(data)


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

["Seplat", "Port Harcourt", "Today",
                "AC repairs", "denazirite@gmail.com"]


      # Extract individual parameters dynamically
        for question, answer in json_payload.items():
            print(f'{question}: {answer}')

        # question = request.json.get("question")
        print(question)

        if question != "What is the client's email?":
            # Append the values to the session list
            session['nda_question_list'].append(question)
            response = ''
            print('Full list', session['nda_question_list'])
        else:
            session['nda_question_list'].append(question)
            data = session['nda_question_list']


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

else {

      // let nda_answers = JSON.parse(localStorage.getItem('myStringArray')) || [];


      // Get the container element
      // const container = document.getElementById('container_nda');
      // nda_answers.push(questionInput);

      print('nda_answers:::>>>>>')
      print(nda_answers)

      // Create the second instance
      let box2 = document.createElement('div');
      box2.classList.add('box2', 'bg-gray-600', 'py-7', 'px-40', 'flex', 'justify-start', 'w-max', 'items-center');
      box2.innerHTML = `
       <div class="box w-[35vw] flex justify-start space-x-6">
         <img class="w-9 h-9 ml-4" src="https://chat.openai.com/favicon.ico" alt="">
         <div class="flex space-y-4 flex-col">
           <div id="question1"><span class="text-sm">CCL Bot</span></div>
           <div id="solution"><span class="text-sm">${nda_questions_2}</span></div>
         </div>
       </div>
     `;

      // Append both instances to the container
      // container.appendChild(box1);
      container.appendChild(box2);

      // Set nda_index to 0 and save it to localStorage
      localStorage.setItem('nda_index', 0);
    }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

  if request.method == "POST":
        print(request.json)
        question = request.json.get("question")

        chat = mongo.db.chats.find_one({"question": question})
        print(chat)
        if chat:
            # Exclude _id field from the retrieved chat document
            chat.pop('_id', None)
            data = {"session": session['chat_session'],
                    "question": question, "answer": f"{chat['answer']}"}

            return jsonify(data)
        else:
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=question,
                temperature=0.7,
                max_tokens=256,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            print(response)

            data = {"session": str(session['chat_session']), "question": question,
                    "answer": response["choices"][0]["text"]}
            # mongo.db.chats.insert_one({"question": question, "answer": response["choices"][0]["text"]})
            mongo.db.chats.insert_one(data)

            # Append the values to the session list

            session['answer_data_list'].append(data)

            # return jsonify(data)

            # Remove _id field from all documents in the session list
            for item in session['answer_data_list']:
                item.pop('_id', None)

            results = session['answer_data_list']
            print('openai RETURED: ')
            print(results)
            print(session)
            # print(session['answer_data_list'])
            return jsonify(results)
    data = {"result": "Thank you! I'm just a machine learning model designed to respond to questions and generate text based on my training data. Is there anything specific you'd like to ask or discuss? "}











xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


// Function to create and append HTML elements
  function createElement(type, attributes, textContent) {
    const element = document.createElement(type);

    for (const key in attributes) {
      if (attributes.hasOwnProperty(key)) {
        element.setAttribute(key, attributes[key]);
      }
    }

    if (textContent) {
      element.textContent = textContent;
    }

    return element;
  }

  // Create form elements
  const formContainer = document.getElementById('dynamicFormContainer');
  const form = createElement('form', { class: 'bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4' });
  const usernameLabel = createElement('label', { class: 'block text-gray-700 text-sm font-bold mb-2' }, 'Username');
  const usernameInput = createElement('input', {
    class: 'shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline',
    id: 'username',
    type: 'text',
    placeholder: 'Username'
  });

  const passwordLabel = createElement('label', { class: 'block text-gray-700 text-sm font-bold mb-2' }, 'Password');
  const passwordInput = createElement('input', {
    class: 'shadow appearance-none border border-red-500 rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline',
    id: 'password',
    type: 'password',
    placeholder: '******************'
  });

  const passwordErrorMsg = createElement('p', { class: 'text-red-500 text-xs italic' }, 'Please choose a password.');

  const signInButton = createElement('button', {
    class: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline',
    type: 'button'
  }, 'Sign In');

  const forgotPasswordLink = createElement('a', {
    class: 'inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800',
    href: '#'
  }, 'Forgot Password?');

  const rightsReservedText = createElement('p', { class: 'text-center text-gray-500 text-xs' }, '&copy;2020 Acme Corp. All rights reserved.');

  // Append elements to the form
  form.appendChild(usernameLabel);
  form.appendChild(usernameInput);
  form.appendChild(passwordLabel);
  form.appendChild(passwordInput);
  form.appendChild(passwordErrorMsg);
  form.appendChild(signInButton);
  form.appendChild(forgotPasswordLink);

  // Append form and rights reserved text to the container
  formContainer.appendChild(form);
  formContainer.appendChild(rightsReservedText);





/////////////////////////////


const handleKeyDown2 = async (event) => {
  // if (event.ctrlKey && event.key === 'Enter') {
  if (event.shiftKey && event.key === 'Enter') {
    console.log('Shift + Enter pressed');
    return;
  }

  if (event.key === 'Enter') {
    questionInput = document.getElementById("questionInput2").innerText;
    //console.log("Clicked sendButton!!!", questionInput)

    document.getElementById("questionInput2").innerText = "";

    // Parameters
    let params = {
      "sender_id": "1",
      "conversation_id": "1",
      "prompt": questionInput,
      "use_history": true
    };

    // Get the answer and populate it! 
    let allresults = await postData("/api", params)

    // Log allresults to understand its structure
    //console.log("API Response:", allresults)

    //console.dir(allresults)

    let responseObject = allresults

    // Get an array of keys
    const keysArray = Object.keys(responseObject);

    // Get an array of values
    const valuesArray = Object.values(responseObject);

    // Output the arrays
    //console.log('Keys:', keysArray);
    //console.log('Values:', valuesArray);

    // Get the container element
    const container = document.getElementById('container');

    // for (let key in responseObject) {
    //console.log(`Question: ${key}, Answer: ${responseObject[key]}`);


    // Create the first instance
    let box1 = document.createElement('div');
    box1.classList.add('box1', 'm-auto', 'py-7', 'px-40', 'flex', 'justify-start', 'w-[35vw]', 'items-center', 'space-x-6');
    box1.innerHTML = `
   <img class="w-9 ml-4" src="static/Images/user.png" alt="">
   <div class="flex space-y-4 flex-col">
      <div id="question_"><span class="text-sm"><b>You</b></span></div>
      <div id="question2"><span class="text-sm">${responseObject["Human"]}</span></div>
   </div>         
`;



    // Create the second instance
    let box2 = document.createElement('div');
    box2.classList.add('box2', 'bg-gray-600', 'py-7', 'px-40', 'flex', 'justify-start', 'w-max', 'items-center');
    box2.innerHTML = `
   <div class="box w-[35vw] flex justify-start space-x-6">
     <img class="w-9 h-9 ml-4" src="static/Images/cclbot.png" alt="">
     <div class="flex space-y-4 flex-col">
       <div id="question1"><span class="text-sm"><b>CCL Bot</b></span></div>
       <div id="solution"><span class="text-sm">${responseObject["AI"]}</span></div>
       <br>

      <div class="svg-container flex">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md api-svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 2.5C5.05228 2.5 5.5 2.94772 5.5 3.5V5.07196C7.19872 3.47759 9.48483 2.5 12 2.5C17.2467 2.5 21.5 6.75329 21.5 12C21.5 17.2467 17.2467 21.5 12 21.5C7.1307 21.5 3.11828 17.8375 2.565 13.1164C2.50071 12.5679 2.89327 12.0711 3.4418 12.0068C3.99033 11.9425 4.48712 12.3351 4.5514 12.8836C4.98798 16.6089 8.15708 19.5 12 19.5C16.1421 19.5 19.5 16.1421 19.5 12C19.5 7.85786 16.1421 4.5 12 4.5C9.7796 4.5 7.7836 5.46469 6.40954 7H9C9.55228 7 10 7.44772 10 8C10 8.55228 9.55228 9 9 9H4.5C3.96064 9 3.52101 8.57299 3.50073 8.03859C3.49983 8.01771 3.49958 7.99677 3.5 7.9758V3.5C3.5 2.94772 3.94771 2.5 4.5 2.5Z" fill="currentColor"></path>
        </svg>  
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md copy-svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M12 4C10.8954 4 10 4.89543 10 6H14C14 4.89543 13.1046 4 12 4ZM8.53513 4C9.22675 2.8044 10.5194 2 12 2C13.4806 2 14.7733 2.8044 15.4649 4H17C18.6569 4 20 5.34315 20 7V19C20 20.6569 18.6569 22 17 22H7C5.34315 22 4 20.6569 4 19V7C4 5.34315 5.34315 4 7 4H8.53513ZM8 6H7C6.44772 6 6 6.44772 6 7V19C6 19.5523 6.44772 20 7 20H17C17.5523 20 18 19.5523 18 19V7C18 6.44772 17.5523 6 17 6H16C16 7.10457 15.1046 8 14 8H10C8.89543 8 8 7.10457 8 6Z" fill="currentColor"></path>
        </svg>
      </div>

     </div>
   </div>
   
   
    
    
`;



    // Add click event for the copy-svg icon
    box2.querySelector('.copy-svg').addEventListener('click', function () {
      // const solutionText = box2.querySelector('#solution').textContent;
      // Use the solutionText as needed, e.g., copy to clipboard
      // console.log('Copying:', solutionText);


      const solutionText = box2.querySelector('#solution').textContent;

      // Copy text to clipboard
      navigator.clipboard.writeText(solutionText)
        .then(() => {
          console.log('Text copied to clipboard:', solutionText);
          // You can add further handling or UI updates here if needed
        })
        .catch(err => {
          console.error('Unable to copy text to clipboard:', err);
          // Handle errors or show a message to the user
        });


    });

    // Add click event for the api-svg icon
    box2.querySelector('.api-svg').addEventListener('click', function () {
      // Call your API here
      console.log('Calling API');
    });


    // Append both instances to the container
    container.appendChild(box1);
    container.appendChild(box2);


    // }


    // Get the existing element with id 'chatbox'
    const chatbox = document.getElementById('chatbox_space');

    // Insert the container above the 'chatbox' element
    chatbox.parentNode.insertBefore(container, chatbox);

    // await new Promise(resolve => setTimeout(resolve, 1000));
    // Prevent the default behavior (new line in contenteditable)  

    event.preventDefault();
    // }
  };
}
